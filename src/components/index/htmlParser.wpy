<style lang="less">

</style>

<template>
  <import src="../../wxParse/wxParse.wxml" />
  <block wx:for="{{htmlParserTpl.nodes}}" wx:key="{{index}}">
    <template is="wxParse0" data="{{item}}"></template>
  </block>
</template>

<script>
import wepy from "wepy";
import WxParse from "../../wxParse/wxParse.js";

export default class HTMLParser extends wepy.component {
  props = {
    parserName: {
      type: String,
      default: 'htmlParserName'
    },
    parserContent: {
      type: String,
      default: '<p style=\'font-size: 28rpx; padding: 5rpx 0;\'>无</p>'
    },
    parserType: {
      type: String,
      default: 'html'
    },
    parserPadding: {
      type: Number,
      default: 0
    }
  };

  data = {
    htmlParserTpl: {},
    bindData: {}
  };

  events = {
    "htmlParser-broadcast": ($event, ...args) => {}
  };

  methods = {
    htmlParserNotice() {
      console.log("invoke");
      this.htmlParse();
    }
  };

  onLoad() {
    this.htmlParse();
  }

  wxParseImgLoad(image) {
    let imgInfo = image.detail;
  }

  htmlParse() {
    try {
      let htmlContent = WxParse.wxParse(
        this.parserName || this.props.parserName.default,
        this.parserType,
        this.parserContent || this.props.parserContent.default,
        this,
        this.parserPadding
      );

      this.htmlParserTpl = htmlContent[this.parserName];
      console.log(this.htmlParserTpl,this.parserContent)

      this.loopArr(this.htmlParserTpl.nodes)

      this.$apply();
    } catch (e) {
      console.warn("kinerHtmlParser:", "没有任何内容需要转换", e);
    }
  }
  loopArr(arr){
    let { pixelRatio, windowWidth } = wx.getSystemInfoSync()
    console.log(pixelRatio, windowWidth)
    arr.forEach(item => {
        if(item.tag == 'img') {
          if(item.attr.width > windowWidth) {
            item.attr.aspectFit = true
          }
        } else if(item.nodes){
          this.loopArr(item.nodes)
        }
      })
  }
  wxParseImgTap(e) {
    WxParse.wxParseImgTap(e, this.bindData);
  }
}
</script>
